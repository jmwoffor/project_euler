# Project Euler # 12
# What is the value of the first triangle number to have over five hundred divisors?
# The sequence of triangle numbers is generated by adding the natural numbers (1,3,6,10,15,...)

import math

divisors = 0
n = 500 # number of divisors
counter = 1
triangle = 1

while divisors <= n:
    divisors = 0 # resets divisors every loop
    counter += 1
    triangle += counter # increments triangle sequence

# needed to change for loop for performance, only really numbers up to the
# square root of the number under test and account for perfect squares
    for i in range(1,round(math.sqrt(triangle))+1):
        if triangle % i == 0 and triangle//i == i: # for perfect squares
            divisors += 1
        elif triangle % i == 0 and triangle//i != i:
            divisors += 2

    print(triangle)
    print("# of Divisors: {}".format(divisors))
